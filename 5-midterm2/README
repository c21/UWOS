1.thread:
  new abstraction for a single running process
  multiple threads share address space, have their own registers(PC,SP,...)
  *when switching threads, change register, don't change page table
  *process's stack is split into several stacks
                    
  APIs:
  pthread_t: the type of thread
  pthread_create(): create thread
  pthread_join(): wait thread to finish
   
  terms:
  critical section: code that accesses a shared resource
  race condition: multiple threads enter critical section at same time
  mutual exclusion: only one thread enters critical section
  atomicity: the instructions cannot be interrupted


2.lock:
  APIs:
  pthread_mutex_t: the type of lock
  pthread_mutex_lock(): acquire the lock
  pthread_mutex_unlock(): release the lock 
 
  spin lock: spin wait when acquiring the lock
  
  (1).test and set(atomic exchange)
      atomically update a variable with new value and return its old value
      int test_and_set(int *ptr, int new)
 
      typedef struct { int flag; } lock_t;
      void init(lock_t *lock) {
        lock->flag = 0;
      }     
      void lock(lock_t *lock) {
        while(test_and_set(&lock->flag, 1) == 1)
          ;
      }
      void unlock(lock_t *lock) {
        lock->flag = 0;
      }
      *suffer from not fair, inefficient on single processor

  (2).compare and swap
      atomically compare the value of variable with an expected value.
      if true, update with new value. else, do nothing. return its old value.
      int compare_and_swap(int *ptr, int expect, int new)
     
      typedef struct { int flag; } lock_t;
      void init(lock_t *lock) {
        lock->flag = 0;
      }  
      void lock(lock_t *lock) {
        while(compare_and_swap(&lock->flag,0,1) == 1)
          ;
      }
      void unlock(lock_t *lock) {
        lock->flag = 0;
      }
      *suffer from not fair, inefficient on single processor

  (3).load linked and store conditional
      load linked: load a variable into register (atomically)
      store conditional: if no store to variable takes place after lock linked, update variable, return 1, 
                         else return 0 (atomically)
      int load_linked(int *ptr)
      int store_conditional(int *ptr, int new)

      typedef struct { int flag; } lock_t;
      void init(lock_t *lock) {
        lock->flag = 0;
      }
      void lock(lock_t *lock) {
        while(load_linked(&lock->flag) || !store_conditional(&lock->flag,1))
          ;
      }
      void unlock(lock_t *lock) {
        lock->flag = 0;
      }
      *suffer from not fair, inefficient on single processor  
  
  (4).fetch and add
      atomically increment a variable's value and return the old value
      int fetch_and_add(int *ptr)
    
      typedef struct { int ticket; int turn; } lock_t;
      void init(lock_t *lock) {
        lock->ticket = lock->turn = 0;
      }   
      void lock(lock_t *lock) {
        int myturn = fetch_and_add(&lock->ticket);
        while(myturn != lock->turn)
          ;
      }
      void unlock(lock_t *lock) {
        lock->turn++;
      }
      *suffer from inefficient on single processor
      *good for fairness

  yield(): 
    call yield() when lock acquisition fails, inform OS to do context switch, schedule another process
    *good to avoid wasting whole CPU time slice
    *suffer from too many context switches, and not fair

  queue:
    put thread into sleep queue when lock acquisition fails, 
    wake up thead in queue when lock release
    park(): put the thread to sleep
    unpark(threadID): wake the thread with threadID
    setpark(): indicate the thread is going to sleep
    typedef struct { int flag; int guard; queue_t *q;} lock_t; 


3.condition variable
  it is a queue that threads can wait on

  APIs:
  pthread_cond_t: the type of condition variable
  pthread_cond_wait(pthread_cond_t*, pthread_mutex_t*): 
    wait on the condition variable, before call wait, a lock must be held. 
    in wait, that lock is released. when the thread is woken up, acquire the lock again before return.
  pthread_cond_signal(pthread_cond_t*): wake up a thread from condition variable

  (1).producer/consumer problem

      mutex_t lock;
      cond_t empty, full;
      int num = 0;

      void producer(int loops) {
        for(int i = 0; i < loops; i++) {
          mutex_lock(&lock);
          while(num == MAX)
            cond_wait(&full, &lock);
          ...
          cond_signal(&empty);
          mutex_unlock(&lock);                               
        } 
      }  
      void consumer(int loops) {
        for(int i = 0; i < loops; i++) {
          mutex_lock(&lock);
          while(num == 0)
            cond_wait(&empty, &lock);
          ...
          cond_signal(&full);
          mutex_unlock(&lock);
        }
      }

4.semaphore
  it is an object with integer and queue
 
  APIs:
  sem_t: the type of semaphore
  sem_init(sem_t*,int a,int b): initialize the integer to value b
  sem_wait(sem_t*): decrement the value of integer, if the value is negative, wait on queue
  sem_post(sem_t*): increment the value of integer, wake up one thread on queue

  (1).lock
      sem_t s;
      sem_init(&s, 0, 1);
      void lock(lock_t *lock) {
        sem_wait(&s);
      }
      void unlock(lock_t *lock) {
        sem_post(&s);
      }          

  (2).producer/consumer problem
      sem_t empty, full, lock;
      sem_init(&empty, 0, MAX);
      sem_init(&full, 0, 0);
      sem_init(&lock, 0, 1);

      void producer(int loops) {
        for(int i = 0; i < loops; i++) {
          sem_wait(&empty);
          sem_wait(&lock);
          ...
          sem_post(&lock);
          sem_post(&full);
        }
      }
      void consumer(int loops) {
        for(int i = 0; i < loops; i++) {
          sem_wait(&full);
          sem_wait(&lock);
          ...
          sem_post(&lock);
          sem_post(&empty);
        }
      }  
  
  (3).reader/writer problem
      multiple readers can read at the same time, only one writer can write.
      when reading, no writing and vice versa.

      sem_t rlock, wlock;
      int num = 0;
      sem_init(&rlock, 0, 1);
      sem_init(&wlock, 0, 1); 

      void read_lock() {
        sem_wait(&rlock);
        num++;
        if(num == 1)
          sem_wait(&wlock);
        sem_post(&rlock);
      }  

      void read_unlock() {
        sem_wait(&rlock);
        num--;
        if(num == 0)
          sem_post(&wlock);
        sem_post(&rlock);
      }

      void write_lock() {
        sem_wait(&wlock);
      }
  
      void write_unlock() {
        sem_post(&wlock);
      }

  (4).use lock and condition variable to build semaphore
      typedef struct { mutex_t lock; cond_t c; int n; } sem_t;
      
      void sem_init(sem_t *s, int a) {
        s->n = a; 
      }  
      
      void sem_wait(sem_t *s) {
        mutex_lock(&s->lock);
        while(s->n <= 0)
          cond_wait(&s->c, &s->lock);  
        s->n--;
        mutex_unlock(&s->lock);
      } 

      void sem_post(sem_t *s) {
        mutex_lock(&s->lock);
        s->n++;
        cond_signal(&s->c);
        mutex_unlock(&s->lock); 
      }

5.concurrency bug
  deadlock: deadlock occurs when threads hold some locks, but wait for each other's locks to release
  conditions for deadlock:
  (1).mutual exclusion: threads need exclusive access of resources(e.g. use lock)
  (2).hold and wait: threads hold some resources(e.g. a lock), and wait for other resources(e.g. another lock)  
  (3).no preemption: resources(e.g. lock) cannot be removed from threads are holding them  
  (4).circular wait: there is a cycle of threads that A holds resources that B needs 
  If any of conditions are not met, deadlock cannot occur.
  prevent deadlock:
  (1).mutual exclusion: instead of using lock, use special hardware instruction
  (2).hold and wait: acquire all locks atomically(acquire a common lock first)
  (3).no preemption: trylock()(if lock is free, grab the lock. else return -1, but not wait). 
                     use trylock to release previous locks if current lock cannot be acquired
  (4).circular wait: specify the order of lock acquisition

6.device
  (1).structure
  interface (3 registers: status, command, data)
  internal (implementation of device)  
  
  how to interact with this device:
  check status register (polling: if repeatedly reading status register)
  write to data and command registers (programmed I/O: if CPU is involved with this step)
  check status register

  OS reads/writes device:
  1.I/O instruction: explicitly read/write device register
  2.memory-mapped I/O: make device register available as memory location, use load/store

  *Polling is inefficient, wasting CPU time.
  solution: interrupt. Process goes to sleep when device is busy.
            When device is ready, it raises an interrupt, OS wakes up that process.
            *Sometimes context-switch is expensive.

  *Programmed I/O: CPU copies data from memory to disk, wasting CPU time.
  solution: direct memory access(DMA). A device to transfer data between memory and devices.
            When it finishes, raising an interrupt to notify OS.    
      
  (2).device driver
  A software in OS, transfer generic block read/write from file system, to
  specific device read/write, because different devices may have different interface.
  Different devices have different device drivers.   

7.hard disk drive
  A device
  (1).structure
  interface: read/write an array(each element is a sector: 512B)
  internal: surface -> track -> sector, disk head/arm. Read/write includes disk head seek, and disk rotation.    
            read/write time: seek(find track), rotation(find sector), transfer(read/write data by rotation).

  RPM: rotations per minute.
  rate of I/O: (size of data) / (finish time) 
  track skew: change tracks layout, to help sequential read/write across track, not wait too much for rotation.
  multi-zoned: outer tracks have more sectors than inner tracks.
  track buffer/cache: memory to cache disk data.
  write back: disk reports finish when writing data to its memory.
  write through: disk reports finish when writing data to its device.       

  (2).scheduling
      OS/disk controller policy to order read/write operations, 
      try to follow shortest job first for best turnaround time.
      a.shortest seek time first (SSF)  
        *suffer from starvation of requests which are not in current track.
        *suffer from ignoring rotation time.
      b.elevator algorithms 
        1.SCAN: move from inner track to outer(a sweep), and come back.
          *good for fairness to delay late coming requests which are in near-by tracks.
          *suffer from starvation of requests which are not in current tracks.
          *suffer from ignoring rotation time.
        2.F-SCAN: freeze the queue of requests in a sweep
          *good for fairness to better delay late coming requests which are in near-by tracks.
          *suffer from ignoring rotation time.
        3.C-SCAN: only move in one direction (e.g. inner to outer).
          *good for fairness of inner and outer tracks.
          *suffer from ignoring rotation time.
      c.shortest positioning/access time first (SPTF/SATF)
        position/access time = seek + rotation time
        *good for also considering rotation time.     

      I/O merging: merge near-by requests into one.
      work-conserving: when have an I/O request, send it to disk.
      non-work-conserving: when have an request, wait for a while, send them to disk, may have better requests when waiting.
